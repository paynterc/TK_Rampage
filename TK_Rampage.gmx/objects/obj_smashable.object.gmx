<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grabbable</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
movespeed=0;
state = STATE_GB_INIT;
hp = 1;
damage = 1;//damage i do to other smashables
bbr=noone;
bbl=noone;
bbt=noone;
bbb=noone;
vspd = background_vspeed[0];
explode_object = obj_explosion_generic;
explode_sprite = spr_explosion_d;
explode_sound = snd_ef_splat1;
scored=0;
image_speed=.5;
flash=0;
overshooting=0;// overshoot grabber when grabbed
depth_mod=0;
is_bullet=false;
intangible=false;//Cant be hit. bullets pass through
rotationSpeed = (360/room_speed)/ 2;
thingsIhaveHit = array_create(1);// an array of objects this thing has hit. apply damage once to each.
thingsIhaveHit[0]=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exploded and destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set bounding box

bbr = x + (sprite_width/2);
bbl = x - (sprite_width/2);
bbt = y - (sprite_height/2);
bbb = y + (sprite_height/2);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move
if(state==STATE_GB_GRABBED){

    if(instance_exists(obj_grabber)){
        var mvSpd = distance_to_point(obj_grabber.x,obj_grabber.y) / obj_grabber.movespeed
        move_towards_point(obj_grabber.x,obj_grabber.y,mvSpd);
    }
    image_angle += rotationSpeed;

    /***
    if( instance_exists(obj_grabber) ){
        if(!overshooting){
            move_towards_point(obj_grabber.x,obj_grabber.y,obj_grabber.movespeed);
        }
        
        if( distance_to_point(obj_grabber.x,obj_grabber.y) &lt;= movespeed ){
            overshooting=1;
        }else if( distance_to_point(obj_grabber.x,obj_grabber.y) &gt; sprite_width/2 ){
            overshooting=0;
        }
    }
    ***/
    depth = -10000000;
    
}else if(state == STATE_GB_THROWN){
    // Flying through air now
    image_angle += rotationSpeed;
 
}else if(state==STATE_GB_EXPLODING){
    y += vspd;
    depth = 10000;
}else{
    y += vspd;
    depth = -y;
    depth -= depth_mod;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if offscreen
if(state==STATE_GB_INIT){
    if(bbb&gt;global.bound_t){
        state = STATE_GB_STATIC;
    }
}else if(state!=STATE_GB_GRABBED){

    if( 
    bbb&lt;global.bound_t ||
    bbr&lt;global.bound_l ||
    bbl&gt;global.bound_r
    ){
        hp=0;
    }
    
    if( 
    bbt&gt;global.bound_b
    ){
        instance_destroy();
    }
    
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check HP
if(state!=STATE_GB_EXPLODING){
    if(hp&lt;1){
        state=STATE_GB_EXPLODING;
        event_user(0);

    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_smashable">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Impact other smashable

if(state==STATE_GB_GRABBED &amp;&amp; other.state==STATE_GB_GRABBED){

    // Make grabbed items float around a little
    if(x == other.x &amp;&amp; y == other.y){        
        x+=sign(other.id - id);
        y+=0;       
    }
    
    var dir = point_direction(other.x, other.y, x, y);
    var hspd = lengthdir_x(.5,dir);
    var vspd = lengthdir_y(.5,dir);
    x+=hspd;
    y+=vspd;
   
}else if(state==STATE_GB_STATIC){
    // Blocking
    if(other.is_bullet || !is_bullet){
        // Can only block bullets, but can't block with bullets.
    }else if(other.state == STATE_GB_GRABBED ){
        //state = STATE_GB_STATIC;
        if(!scr_inarray(other.id,thingsIhaveHit)){
            scr_push_array_1d(thingsIhaveHit,other.id);
            hp--;
            other.hp -= damage;  
            other.flash=1;
            flash=1;
            scr_sound_service("impact");
        }
    }
    
}else if(state==STATE_GB_THROWN){

    if(is_bullet &amp;&amp; other.is_bullet){
        //ignore other bullets
    }else if(other.state != STATE_GB_GRABBED 
        &amp;&amp; other.state != STATE_GB_THROWN
        &amp;&amp; other.state != STATE_GB_EXPLODING
        &amp;&amp; !other.intangible){

        if(!scr_inarray(other.id,thingsIhaveHit)){
            scr_push_array_1d(thingsIhaveHit,other.id);
            hp--;
            other.hp -= damage;  
            other.flash=1;
            flash=1;
            scr_sound_service("impact");
        }


    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

var ex = instance_create(x,y,explode_object);
if(explode_sprite!=noone){
    ex.sprite_index = explode_sprite;
}

if(explode_sound!=noone){
    scr_sound_service(explode_sound);//should be a string
}


instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop exploding
if(state==STATE_GB_EXPLODING){
    image_speed = 0;
    image_index = image_number - 1;
    //instance_destroy(self);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flash when hit
if (flash) {
    flash = 0;
    d3d_set_fog(true, c_white, 0, 0);
    draw_self();
    d3d_set_fog(false, c_white, 0, 0);
}else{
    if(sprite_index){
        draw_self();
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

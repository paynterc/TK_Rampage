<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grabber</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
depth = -1000000;
move = 0;
hsp = 0;
vsp = 0;
movespeed = 6;
throwspeed = .05;// Pause between throws
state = STATE_GR_MOVING;
queue = ds_queue_create();
can_throw=1;
max_grabbed = 16;// Max number of grabbed items
image_speed=.25;

at_capacity = false;

audio_play_sound(snd_ef_tkloop,2,1);
audio_pause_sound(snd_ef_tkloop);
audio_play_sound(snd_ef_tkloop_throw,2,1);
audio_pause_sound(snd_ef_tkloop_throw);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
ds_queue_destroy(queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Allow next throw
can_throw = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get player's input

if(scr_user_input(INPUT_THROW) &amp;&amp; scr_user_input(INPUT_GRAB)){
    
    state=STATE_GR_THROWING;

}else if(scr_user_input(INPUT_GRAB)){
    state = STATE_GR_GRABBING;
    can_throw = 1;
    
}else{
    state=STATE_GR_MOVING;
}

if(state==STATE_GR_GRABBING){
    audio_pause_sound(snd_ef_tkloop_throw);
    if(audio_is_paused(snd_ef_tkloop)){
        audio_resume_sound(snd_ef_tkloop);
    }
    sprite_index = spr_grabber;
    if( distance_to_point(mouse_x,mouse_y) &gt; movespeed ){
        move_towards_point(mouse_x,mouse_y,movespeed);
    }else{
        speed = movespeed/2;
    }

}else if(state==STATE_GR_MOVING){
    audio_pause_sound(snd_ef_tkloop);
    audio_pause_sound(snd_ef_tkloop_throw);
    sprite_index = spr_headlight;
    x = mouse_x;
    y = mouse_y;
    
    if !ds_queue_empty(queue)
    {
        release_me = ds_queue_dequeue(queue);
        if(instance_exists(release_me)){
            release_me.state = STATE_GB_STATIC;
            release_me.speed = 0;
        }
    }

    
}else if(state == STATE_GR_THROWING){
    audio_pause_sound(snd_ef_tkloop);
    if(audio_is_paused(snd_ef_tkloop_throw)){
        audio_resume_sound(snd_ef_tkloop_throw);
    }
    
    sprite_index = spr_grabber;
    speed=0;
    if(can_throw){
        can_throw = 0;
        var dir = point_direction(x,y,mouse_x,mouse_y);
        if !ds_queue_empty(queue)
        {
            var throwme;
            throwme = ds_queue_dequeue(queue);
            if(instance_exists(throwme)){
                throwme.state = STATE_GB_THROWN;
                throwme.direction = dir;
                throwme.image_angle = dir;
                throwme.speed = 20;
            }
        }
        alarm[0] = room_speed * throwspeed;
    }    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check grab capacity
at_capacity = ds_queue_size(queue) &gt;= max_grabbed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_grabbable">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Grab it
if(state==STATE_GR_GRABBING &amp;&amp; other.state == STATE_GB_STATIC &amp;&amp; !other.ungrabbable){
    if( ds_queue_size(queue) &lt; max_grabbed ){
        other.state = STATE_GB_GRABBED;
        ds_queue_enqueue(queue, other.id);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
ds_queue_destroy(queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(state == STATE_GR_GRABBING){
    scr_draw_lightning(obj_headlight.x,obj_headlight.y,x,y,4,8,8,8);
}else if(state == STATE_GR_THROWING){
    scr_draw_lightning(x,y,mouse_x,mouse_y,4,8,8,8);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

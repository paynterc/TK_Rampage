<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grabber3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
depth = -1000000;
move = 0;
hsp = 0;
vsp = 0;
movespeed = 2;
throwspeed = .05;// Pause between throws
state = STATE_GR_GRABBING;
//state = STATE_GR_STORM
queue = ds_queue_create();
can_throw=1;
max_grabbed = 16;// Max number of grabbed items


lastX = x;
lastY = y;
pointerDir = 0;

image_speed=.25;

spr0 = spr_grabber4;
spr1 = spr_grabber8;
spr2 = spr_grabber6;
spr3 = spr_grabber9;

spr_default = spr1;
spr_throw = spr_grabber_throw;

at_capacity = false;
capacitycolor1 = c_white;
capacitycolor2 = c_aqua;

audio_play_sound(snd_ef_tkloop,2,1);
audio_pause_sound(snd_ef_tkloop);
audio_play_sound(snd_ef_tkloop_throw,2,1);
audio_pause_sound(snd_ef_tkloop_throw);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
ds_queue_destroy(queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Allow next throw
can_throw = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set sprite
if(global.maxweight&gt;2){
    spr_default = spr3;
}else if(global.maxweight&gt;1){
    spr_default = spr2;
}else if(global.maxweight&gt;0){
    spr_default = spr1;
}else{
    spr_default = spr0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check grab capacity
at_capacity = ds_queue_size(queue) &gt;= max_grabbed;
if(at_capacity){
    capacitycolor2 = c_fuchsia;
}else{
    capacitycolor2 = c_aqua;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player input and State

if(state == STATE_GR_STORM){
    // continue
}else if(scr_user_input(INPUT_AIM)){

    state=STATE_GR_AIMING;
    
}else if(scr_user_input(INPUT_THROW) ){
    
    state=STATE_GR_THROWING;

}else{

    state = STATE_GR_GRABBING;
    can_throw = 1;
}



if(state==STATE_GR_STORM){
    //x = mouse_x;y=mouse_y;
    x=obj_player.x;y=obj_player.y;
    sprite_index = spr_grabber3;
    image_speed=.5;
    image_angle=0;
    

}else if(state==STATE_GR_GRABBING){
    audio_pause_sound(snd_ef_tkloop_throw);
    if(audio_is_paused(snd_ef_tkloop)){
        audio_resume_sound(snd_ef_tkloop);
    }
    sprite_index = spr_default;
    image_speed=.5;
    image_angle=0;


    /**
    if( distance_to_point(mouse_x,mouse_y) &gt; movespeed ){
        move_towards_point(mouse_x,mouse_y,movespeed);
    }else{
        speed = movespeed/2;
    }
    **/
    x = mouse_x;y=mouse_y;

}else if(state == STATE_GR_AIMING){
    // DO Nothing here form now
    sprite_index = spr_default;
    image_speed=.5;
    image_angle=0;

}else if(state == STATE_GR_THROWING){

    image_xscale=1;
    image_yscale=1;
    image_alpha=1;
    image_speed = 1;

    if !ds_queue_empty(queue)
    {
        audio_pause_sound(snd_ef_tkloop);
        if(audio_is_paused(snd_ef_tkloop_throw)){
            audio_resume_sound(snd_ef_tkloop_throw);
        }
        

        sprite_index = spr_throw;
        image_angle = point_direction(x,y,mouse_x,mouse_y);
        image_speed = 1;
        speed=0;
        if(can_throw){
            can_throw = 0;

            var throwme;
            throwme = ds_queue_dequeue(queue);
            if(instance_exists(throwme)){
                throwme.state = STATE_GB_THROWN;
                throwme.direction = image_angle;
                throwme.image_angle = image_angle;
                throwme.speed = 20;
                scr_sound_service("throw1");
            }
            
            alarm[0] = room_speed * throwspeed;
        }    
    }else{
        can_throw = 1;
        sprite_index = spr_default;
        //state = STATE_GR_GRABBING;
    }
    
}else{
    sprite_index = spr_default;
    image_angle = 0;
}

if(lastX!=x || lastY!=y){
    pointerDir = point_direction(lastX,lastY,x,y);
}
var pointerX = x+lengthdir_x(32,pointerDir);
var pointerY = y+lengthdir_y(32,pointerDir);
lastX=x;
lastY=y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_grabbable">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Grab it
if(other.weight&lt;=global.maxweight){
    if(state==STATE_GR_GRABBING &amp;&amp; other.state == STATE_GB_STATIC &amp;&amp; !other.ungrabbable){
        if( ds_queue_size(queue) &lt; max_grabbed ){
            other.state = STATE_GB_GRABBED;
            ds_queue_enqueue(queue, other.id);
            scr_sound_service("pickup1");
            if(object_is_ancestor(other,obj_en_waveshooter)){
                other.hp = 10;
            }
        }
    }else if(state==STATE_GR_STORM ){
        if(other.state!=STATE_GB_THROWN &amp;&amp; !other.ungrabbable){
            var dir = point_direction(x,y,mouse_x,mouse_y);
            other.state = STATE_GB_THROWN;
            other.x=x;other.y=y;
            other.direction = dir;
            other.image_angle = dir;
            other.speed = 10;
            scr_sound_service("throw1");
        }
    }   
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
ds_queue_destroy(queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw lightning
draw_self();
if(state == STATE_GR_GRABBING){
    scr_draw_lightning(obj_headlight.x,obj_headlight.y,x,y,2,6,4,16,capacitycolor1,capacitycolor2);
}else if(state == STATE_GR_THROWING){
    //scr_draw_lightning(x,y,mouse_x,mouse_y,4,8,8,8);
    //draw_line(x,y,mouse_x,mouse_y);
}else if(state==STATE_GR_AIMING){
    scr_draw_lightning(x,y,mouse_x,mouse_y,2,6,4,16,capacitycolor1,capacitycolor2);
    //draw_line(x,y,mouse_x,mouse_y);
}
// Draw lightning radiating out 
//scr_draw_lightning(x,y+16,x,y+32,2,6,4,16,capacitycolor1,capacitycolor2);
//scr_draw_lightning(x,y-16,x,y-32,2,6,4,16,capacitycolor1,capacitycolor2);
//scr_draw_lightning(x+16,y,x+32,y,2,6,4,16,capacitycolor1,capacitycolor2);
//scr_draw_lightning(x-16,y,x-32,y,2,6,4,16,capacitycolor1,capacitycolor2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

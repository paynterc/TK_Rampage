<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
enum depthsCinIntro{
    catFood = -1000,
    petBowl = -1500,
    hero = -900,
    cat = -900,
    table = -800,
    blackout1 = -1490,
    blackout2 = -1600,
    cellDoor = 100,
    thoughtBub = -850
    
}


enum statesCin1{
    ready,
    tkMove,
    knockedOut,
    fadeOut,
    tkCharge
}

depth=-10000000;
window_set_cursor(cr_default);
state = statesCin1.ready;
startPointsSet = false;
timelineStarted = false;
steps=0;
pause=false;
clickedInstances = noone;
selectedObj = noone;
showCoords=false;

// Load presets 
/***
ini_open("cindata.ini");
skipBtnX = ini_read_real( 'skipbtn', 'x', 0 );
skipBtnY = ini_read_real( 'skipbtn', 'y', 0 );
skipBtnScl = ini_read_real( 'skipbtn', 'scale', 0 );
ini_close();
***/
skipBtnX = 16;
skipBtnY = 8;
skipBtnScl = .15;

moveX1agent1 = 66;
moveX1agent2 = 92;
moveYEscapeHero = 53;
fadeTimeLast = 2;


var i=0;
ev=noone;
ev[0]=room_speed * 2;
i++;ev[i]=ev[i-1]+room_speed * 2;//1
i++;ev[i]=ev[i-1]+room_speed * 1;//2
i++;ev[i]=ev[i-1]+room_speed * 2;//3
i++;ev[i]=ev[i-1]+room_speed * 1;//4
i++;ev[i]=ev[i-1]+room_speed * 2;//5
i++;ev[i]=ev[i-1]+room_speed * 2;//6
i++;ev[i]=ev[i-1]+room_speed * 1;//7 -- set bowl down
i++;ev[i]=ev[i-1]+room_speed * 1;//8 -- explosion 1
i++;ev[i]=ev[i-1]+5;//9 -- explosion 2
i++;ev[i]=ev[i-1]+10;//10 -- explosion 3
i++;ev[i]=ev[i-1]+room_speed*1;//11 -- enter agents
i++;ev[i]=ev[i-1]+room_speed*2;//12 -- agents grab hero
i++;ev[i]=ev[i-1]+room_speed*.5;//13 -- agents take hero
//steps=ev[i];
i++;ev[i]=ev[i-1]+room_speed*2;//14 -- dim lights
i++;ev[i]=ev[i-1]+room_speed*4;//15 -- dim lights2
i++;ev[i]=ev[i-1]+room_speed*2;//16 -- lights up on cell
i++;ev[i]=ev[i-1]+room_speed*4;//17 -- agent moves from window
i++;ev[i]=ev[i-1]+room_speed*3;//18 -- thoughtbubble
i++;ev[i]=ev[i-1]+room_speed*4;//19 -- charge attack
i++;ev[i]=ev[i-1]+room_speed*3;//20 -- destroy door
i++;ev[i]=ev[i-1]+room_speed*1;//21 -- hero goes up
i++;ev[i]=ev[i-1]+room_speed*2;//22 -- hero leaves room
i++;ev[i]=ev[i-1]+room_speed*2;//23 -- fade out
i++;ev[i]=ev[i-1]+room_speed*1;//24 -- end, go to game
startXcatfood=82;
startYcatfood=74;
endYcatfood=startYcatfood-10;
time=0;

startXpetBowl=54;
startYpetBowl=74;

startXhero = 116;
startYhero = 87;
startXcat = 30;
startYcat = 87;

obj_cin_catfood.x = startXcatfood; 
obj_cin_catfood.y = startYcatfood;

obj_petbowl.x = startXpetBowl; 
obj_petbowl.y = startYpetBowl

with(obj_cin_table){
    x=84;
    y=90;
}

with(obj_cin_table){
    x=84;
    y=90;
}

obj_cin_hero.x=startXhero;
obj_cin_hero.y=startYhero;
obj_cin_hero.image_index = 1;



obj_cin_cat.x=startXcat;
obj_cin_cat.y=startYcat;


startXagent1 = room_width + 34;
startXagent2 = room_width + 34+32;
agent1 = instance_create(startXagent1,startYhero,obj_cin_agent);
agent2 = instance_create(startXagent2,startYhero,obj_cin_agent);
cellDoor = instance_create(1000,1000,obj_cin_celldoor);
distAgent1=0;
distAgent2=0;
spdAgent1=0;
spdAgent2=0;

grabber = instance_create(1000,1000,obj_cin_grabber);
thoughtBub = instance_create(1000,1000,obj_thoughtbub);
stars = instance_create(1000,1000,obj_cin);
stars.sprite_index = spr_stars;
stars.image_speed = .5;

heroUpspd = noone;
heroExitSpd=noone;

skipBtn = instance_create(skipBtnX,skipBtnY,obj_button_skip);
skipBtn.xscale = skipBtnScl;
skipBtn.yscale = skipBtnScl;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Run events
//STEP EVENT
if(!pause) steps++;

if (steps &gt;= ev[0] &amp;&amp; steps &lt; ev[1]){
    state = statesCin1.tkMove;
    obj_cin_hero.image_index = 0;
    // Lift food - 2 secs
    with(obj_cin_catfood){
        if(point_distance(x,y,82,64)&gt;1){
            move_towards_point(82,64, scr_deltatime(1));
        }else{
            x=82;y=64;
            speed=0;
        }
    }
    grabber.x = obj_cin_catfood.x - 10;
    grabber.y = obj_cin_catfood.y - 10;
    grabber.depth = obj_cin_catfood.depth+1;


}else if (steps&gt;=ev[1]&amp;&amp; steps &lt; ev[2]){
    // move food to bowl - 1 secs
    with(obj_cin_catfood){
        if(point_distance(x,y,75,70)&gt;1){
            move_towards_point(75,70, scr_deltatime(1));         
        }else{
            x=75;y=70;
            speed=0;
        }
    }
    grabber.x = obj_cin_catfood.x - 10;
    grabber.y = obj_cin_catfood.y - 10;
    grabber.depth = obj_cin_catfood.depth+1;

}else if (steps==ev[2]){
    // pour food - 2 secs

    with(obj_cin_catfood){
        sprite_index = spr_catfood2;
        image_speed=.25;
    }
    grabber.x = obj_cin_catfood.x - 7;
    grabber.y = obj_cin_catfood.y - 15;
    grabber.depth = obj_cin_catfood.depth+1;

}else if (steps==ev[3]){
    // stop pouring - 1
    with(obj_cin_catfood){
        sprite_index = spr_catfood;
        image_speed=0;
    }
    obj_petbowl.sprite_index = spr_petbowl_full;
    grabber.x = obj_cin_catfood.x - 10;
    grabber.y = obj_cin_catfood.y - 10;
    
}else if (steps&gt;=ev[4] &amp;&amp; steps &lt; ev[5]){
    
    // move food back to start
    var startX = startXcatfood;
    var startY = startYcatfood;
    with(obj_cin_catfood){
        if(point_distance(x,y,startX,startY)&gt;1){
            move_towards_point(startX,startY, scr_deltatime(1));
        }else{
            speed=0;
        }
    }
    grabber.x = obj_cin_catfood.x - 10;
    grabber.y = obj_cin_catfood.y - 10;
    grabber.depth = obj_cin_catfood.depth+1;

}else if (steps&gt;=ev[5] &amp;&amp; steps &lt; ev[6]){
        // Move bowl in air
    with(obj_petbowl){
        if(point_distance(x,y,40,63)&gt;1){
            move_towards_point(40,63, scr_deltatime(1));
        }else{
            speed=0;
        }
    }
    grabber.x = obj_petbowl.x - obj_petbowl.sprite_width/2;
    grabber.y = obj_petbowl.y - obj_petbowl.sprite_width/2;
    grabber.depth = obj_petbowl.depth+1;

}else if (steps&gt;=ev[6] &amp;&amp; steps &lt; ev[7]){
        // Move bowl to cat 
    with(obj_petbowl){
        if(point_distance(x,y,37,88)&gt;1){
            move_towards_point(37,88, scr_deltatime(1));
        }else{
            speed=0;
        }
    }
    grabber.x = obj_petbowl.x - obj_petbowl.sprite_width/2;
    grabber.y = obj_petbowl.y - obj_petbowl.sprite_width/2;
    grabber.depth = obj_petbowl.depth+1;

}else if(steps==ev[7]){
    state = statesCin1.ready;
    grabber.x=1000;
    grabber.y=1000;
}else if(steps==ev[8]){

    grabber.x = 1000;
    grabber.y = 1000;

    state = statesCin1.knockedOut;
    
    //explode
    var expl = instance_create(118,49,obj_explosion_generic);
    expl.sprite_index = spr_explosion_b;
    expl.image_angle = 90;
    expl.image_xscale = 2;
    expl.image_yscale = 2;
    

    with(obj_cin_hero){
        image_angle=90;
        y=62;
        x=84;
        sprite_index = spr_player_cin2;
        image_index = 2;
    }
    stars.x=68;
    stars.y=58;
    with(obj_petbowl){
        image_angle=90;
        sprite_index = spr_petbowl_spill;
        y=79;x=29;
    }

    with(obj_cin_catfood){
        image_angle=90;
        y=54;
        speed=-20;
    }    

    with(obj_cin_table){
        image_angle = 90;
        y=45;
        x=50;
    }

    obj_cin_cat.sprite_index = spr_cat_kneel;
    
    audio_play_sound(snd_ef_explosion1,1,0);
    
}else if(steps==ev[9]){
    //explode
    var expl = instance_create(118,24,obj_explosion_generic);
    expl.sprite_index = spr_explosion_b;
    expl.image_angle = 90;
    expl.image_xscale = 1.5;
    expl.image_yscale = 1.5;
    audio_play_sound(snd_ef_explosion1,1,0);
}
else if(steps==ev[10]){
    //explode
    var expl = instance_create(114,77,obj_explosion_generic);
    expl.sprite_index = spr_explosion_b;
    expl.image_angle = 90;
    distAgent1 = abs(agent1.x - moveX1agent1)
    distAgent2 = abs(agent2.x - moveX1agent2);
    spdAgent1 = distAgent1/(room_speed*2);
    spdAgent2 = distAgent2/(room_speed*2);
    audio_play_sound(snd_ef_explosion1,1,0);
    
}else if(steps&gt;=ev[11] &amp;&amp; steps &lt; ev[12]){
    if(agent1.x&gt;moveX1agent1){
        agent1.x -= spdAgent1;
    }
    if(agent2.x&gt;moveX1agent2){
        agent2.x -= spdAgent2;
    }
}else if(steps&gt;=ev[13] &amp;&amp; steps &lt; ev[14]){
    agent1.speed = 1;
    agent2.speed = 1;
    obj_cin_hero.speed = 1;
    stars.x=1000;
    stars.y=1000;
}else if(steps==ev[14]){
    state=statesCin1.fadeOut;
    var bk1 = instance_create(0,0,obj_blackout);
    bk1.fadeTime = 4*room_speed;
    bk1.depth = depthsCinIntro.blackout1;
    bk1.run = true;
}else if(steps==ev[15]){

    var bk2 = instance_create(0,0,obj_blackout);
    bk2.fadeTime = 2*room_speed;
    bk2.depth = depthsCinIntro.blackout2;
    bk2.run = true;
}else if(steps==ev[16]){
    
    with(obj_cin){
        x=1000;
        y=1000;
        speed=0;
    }
    with(obj_blackout){
        instance_destroy();
    }
    
    background_index[0]=bg_jailcell;   
    with(obj_cin_hero){
        image_angle=0;
        y=75;
        x=78;
        sprite_index = spr_player_cin;
        image_index = 0;
    }
    cellDoor.x=118;
    cellDoor.y=59;
    agent1.x=44;
    agent1.y=56;
    agent1.depth=cellDoor.depth+1;
     
    var bk3 = instance_create(0,0,obj_blackin);
    bk3.fadeTime = 3*room_speed;
    bk3.depth = depthsCinIntro.blackout2;
    bk3.run = true;


}else if(steps==ev[17]){

    agent1.speed = -.25;
}else if(steps==ev[18]){

    thoughtBub.x=117;thoughtBub.y=49;
    thoughtBub.image_speed = .25;
    obj_cin_cat.x=95;obj_cin_cat.y=29
    obj_cin_cat.depth = depthsCinIntro.cat;
    obj_cin_cat.sprite_index = spr_cat;
    obj_petbowl.x=101;
    obj_petbowl.y=obj_cin_cat.y;
    obj_petbowl.sprite_index = spr_petbowl;
    obj_petbowl.image_angle = 0;
    
    
}else if(steps&gt;ev[19] &amp;&amp; steps&lt;ev[20]){

    thoughtBub.x=1000;thoughtBub.y=1000;
    obj_cin_cat.x=1000;obj_cin_cat.y=1000;
    obj_petbowl.x=obj_cin_cat.x+18;
    obj_petbowl.y=obj_cin_cat.y;

    state = statesCin1.tkCharge;
    grabber.x = obj_cin_hero.x-16;
    grabber.y = obj_cin_hero.y-16;
    grabber.depth = obj_cin_hero.depth+1;
    grabber.image_xscale += .005;
    grabber.image_yscale += .005;
    
    obj_cin_hero.image_index = 1;
    
}else if(steps==ev[20]){
    state = statesCin1.ready;
        //explode
    expl = instance_create(cellDoor.x-32,cellDoor.y-32,obj_explosion_generic);
    expl.sprite_index = spr_explosion_b;
    expl.image_xscale = 4;
    expl.image_yscale = 4;
    
    cellDoor.sprite_index = spr_cin_doorexploded;
    cellDoor.depth = obj_cin_hero.depth -1;
    audio_play_sound(snd_ef_explosion1,1,0);
    
}else if(steps&gt;=ev[21] &amp;&amp; steps&lt;ev[22]){
    // Move up to 60
    if(heroUpspd==noone){
        heroUpspd = (obj_cin_hero.y - moveYEscapeHero) / (room_speed*1);
    }
    if(obj_cin_hero.y&gt;moveYEscapeHero){
        obj_cin_hero.y-=heroUpspd;
    }
    grabber.x = obj_cin_hero.x-16;
    grabber.y = obj_cin_hero.y-16;
    grabber.depth = obj_cin_hero.depth+1;
    
}else if(steps&gt;=ev[22] &amp;&amp; steps&lt;ev[23]){
    // Exit Right
    if(heroExitSpd==noone){
        heroExitSpd = (room_width+32 - obj_cin_hero.x) / (room_speed*2);
    }
    obj_cin_hero.x += heroExitSpd;
    
    grabber.x = obj_cin_hero.x-16;
    grabber.y = obj_cin_hero.y-16;
    grabber.depth = obj_cin_hero.depth+1;
    
}else if(steps==ev[23]){
    // Fadeout
    var bk1 = instance_create(0,0,obj_blackout);
    bk1.fadeTime = fadeTimeLast*room_speed;
    bk1.depth = depthsCinIntro.blackout2;
    bk1.run = true;
}else if(steps==ev[24]){
    // End. Go to game
    room_goto(rm_1);
}

      

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard Controlls
if(debug_mode){
    if(keyboard_check_pressed(vk_enter)){
        room_goto(room);
    }
    if(keyboard_check_pressed(vk_space)){
        pause = !pause;
    }
    
    showCoords=false;
    selectedObj = noone;
    if( mouse_check_button(mb_left) ){
        
        var D=100000000;
        var inst;
        for (var i = 0; i &lt; instance_number(obj_cin); i += 1)
        {
            inst = instance_find(obj_cin,i);
            if(position_meeting(mouse_x, mouse_y, inst)){
                if(inst.depth &lt; D){
                    D = inst.depth;
                    selectedObj = inst;
                }
            }
    
        }
        
        if(selectedObj!=noone){
            showCoords=true;
            if(keyboard_check_pressed(vk_left)){
                selectedObj.x--; 
            }else if(keyboard_check_pressed(vk_right)){
                selectedObj.x++;
            }
            
            if(keyboard_check_pressed(vk_up)){
                selectedObj.y--; 
            }else if(keyboard_check_pressed(vk_down)){
                selectedObj.y++;
            }
        }
        
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw

    if(state==statesCin1.tkMove){
        with(obj_cin_hero){
            scr_draw_lightning(x-16,y-30,obj_cin_grabber.x,obj_cin_grabber.y,2,6,4,16,noone,noone);
        }
    }
    if(state == statesCin1.tkCharge){
        with(obj_cin_hero){
            scr_draw_lightning(x-16,y-30,0,0,2,6,4,16,noone,noone);
            scr_draw_lightning(x-16,y-30,0,room_height,2,6,4,16,noone,noone);
            scr_draw_lightning(x-16,y-30,room_width,0,2,6,4,16,noone,noone);
            scr_draw_lightning(x-16,y-30,room_width,room_height,2,6,4,16,noone,noone);
        }
    }
if(debug_mode){
    var clr;
    if(showCoords &amp;&amp; selectedObj!=noone){
        clr = draw_get_color();
        draw_set_color(c_lime);
        draw_set_valign(fa_top);
        draw_set_halign(fa_left);
        draw_text_transformed(0,0,"x:" + string(selectedObj.x) + ", y:"+string(selectedObj.y),.10,.10,0);
        draw_set_color(clr);
    }
    
    if(pause){
        clr = draw_get_color();
        draw_set_color(c_red);
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_left);
        draw_text_transformed(0,room_height-16,"PAUSED",.10,.10,0);
        draw_set_color(clr);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

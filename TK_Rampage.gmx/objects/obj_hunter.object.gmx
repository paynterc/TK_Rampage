<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_en</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init override
ungrabbable=1;// Can't grab me
hp =5;
hpmax = hp;
waypoints = noone;
wpi = 0;// Waypoint index
movespeed = 2;


gun_obj = obj_rifle;
my_gun = noone;
turn_speed=2;
accuracy=.5;



ob_w = sprite_width;// Object width
ob_h = sprite_height;// Object height
ob_xb = ob_w /2; // Object xbound
ob_yb = ob_h /2; // Object ybound
range_full = global.bound_r - global.bound_l;

var xoffset;
var ypoint;
for(var i = 0; i &lt; 10; i++){
    xoffset = irandom_range(ob_xb,range_full-ob_xb);
    ypoint = irandom_range( global.bound_t + ob_yb, global.bound_b - sprite_height );

    waypoints[i,0]=global.bound_l + xoffset;
    waypoints[i,1]=ypoint;
  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fire bullet, update waypoint

// Fire bullet
var bullet = instance_create(x + lengthdir_x(64, my_gun.image_angle),y + lengthdir_y(64, my_gun.image_angle), obj_bullet);
bullet.direction = my_gun.image_angle;
bullet.image_angle = my_gun.image_angle;
bullet.speed = 20;

// Update waypoint
wpi++;
if(wpi &gt;= array_height_2d(waypoints) ){
    wpi = 0;
}

state = STATE_GB_STATIC;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set bounding box
bbr = x + (sprite_width/2);
bbl = x - (sprite_width/2);
bbt = y - (sprite_height/2);
bbb = y + (sprite_height/2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set states

if(my_gun==noone){
    my_gun = instance_create(x,y,gun_obj);
}



if(state==STATE_GB_INIT){
    if(bbb&gt;global.bound_t){
        state = STATE_GB_STATIC;
    }
}else if(state==STATE_GB_STATIC){
    if(is_array(waypoints)){
        
        if( distance_to_point( waypoints[wpi,0], waypoints[wpi,1] ) &lt;= movespeed ){
            // Increment coordinate index
            state = STATE_GB_AIMING;
            alarm[0]=room_speed * 3;
            
        }else{
        
            move_towards_point(waypoints[wpi,0],waypoints[wpi,1], movespeed);
        
        }  
    }
}else if(state=STATE_GB_AIMING){
    // Slowly rotate gun toward player. Start timer to fire
    speed = 0;
    if(my_gun!=noone &amp;&amp; instance_exists(obj_player)){
        scr_gradually_rotate(my_gun,obj_player,turn_speed, accuracy);
    }

    
}

y += vspd;
depth = -y;
    
my_gun.x = x;
my_gun.y = y;
my_gun.depth = depth-10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check HP
if(state!=STATE_GB_EXPLODING){
    if(hp&lt;1){
        state=STATE_GB_EXPLODING;
        sprite_index = explode_sprite;
        if(global.blood){
            image_blend = c_red;
        }else{
            image_blend = c_white;
        }   
        
        speed = 0;
        movespeed = 0;
        vspd = background_vspeed[0];
        depth=1000;
        if(!scored){
            scored=1;
            global.gamescore++;
        }
        scr_sound_service("splatloud");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Healthbar
draw_self();
if(state!=STATE_GB_EXPLODING){
    var pc = (hp/hpmax) * 100;
    draw_healthbar(x-16,y-32,x+16,y-30,pc,c_black,c_yellow,c_lime,0,1,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

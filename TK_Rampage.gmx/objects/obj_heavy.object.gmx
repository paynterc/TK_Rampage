<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_heavy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_hunter</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init override
hp=5;
hpmax = hp;
movespeed = 4;
my_gun_sprite = spr_rifle_commando;
my_bullet_sprite = spr_spark;
my_bullet_speed=10;
my_gun_length = sprite_get_width(my_gun_sprite)- sprite_get_xoffset(my_gun_sprite);
turn_speed=3;
accuracy=1;

fire_rate=.10;
fire_amount=5;
fire_remaining=fire_amount;
tgtAngle1 = 0;
tgtAngle2 = 0;
tgtAngleTgl = 0;

vspd=0;

muzzleFlash = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop firing. Update waypoint. Start moving
// Update waypoint
wpi++;
if(wpi &gt;= array_height_2d(waypoints) ){
    wpi = 0;
}
state = STATE_GB_STATIC;// moving
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fire bullet
if(!instance_exists(my_gun)) exit;
if(state == STATE_GB_FIRING){
    var bullet = instance_create(my_gun.x + lengthdir_x(my_gun_length, my_gun.image_angle),my_gun.y + lengthdir_y(my_gun_length, my_gun.image_angle), my_bullet);
    bullet.sprite_index = my_bullet_sprite;
    bullet.direction = my_gun.image_angle;
    bullet.image_angle = my_gun.image_angle;
    bullet.speed = my_bullet_speed;

    audio_play_sound(snd_shot1,2,0);
    alarm[1]=room_speed * fire_rate;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do nothing (Override)



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set bounding box
bbr = x + (sprite_width/2);
bbl = x - (sprite_width/2);
bbt = y - (sprite_height/2);
bbb = y + (sprite_height/2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set states
/// Check HP
if(state!=STATE_GB_EXPLODING){
    if(hp&lt;1){
        state=STATE_GB_EXPLODING;
        event_user(0);
        exit;
    }
}

if(my_gun==noone){
    my_gun = instance_create(x,y,gun_obj);
    my_gun.sprite_index=my_gun_sprite;
    muzzleFlash = instance_create(x + lengthdir_x(my_gun_length, my_gun.image_angle),y + lengthdir_y(my_gun_length, my_gun.image_angle), obj_muzzleflash);
    //muzzleFlash.image_alpha = 0;
}



if(state==STATE_GB_INIT){
    muzzleFlash.image_alpha = 0;
    if(bbb&gt;global.bound_t){
        state = STATE_GB_STATIC;
    }
}else if(state==STATE_GB_STATIC){
    muzzleFlash.image_alpha = 0;
    if(is_array(waypoints)){
        
        if( distance_to_point( waypoints[wpi,0], waypoints[wpi,1] ) &lt;= movespeed ){
            // Increment coordinate index
            if(my_gun!=noone &amp;&amp; instance_exists(obj_player)){
                my_gun.image_angle = point_direction(my_gun.x,my_gun.y,room_width/2,room_height/2);
                my_gun.direction = my_gun.image_angle;
                tgtAngle1 = my_gun.image_angle - (45 * dir);
                tgtAngle2 = my_gun.image_angle + (45 * dir);
                tgtAngleTgl = tgtAngle1;
            }
            speed = 0;
            alarm[1]=1;// start firing
            alarm[2]=room_speed * 6;// stop firing
            state = STATE_GB_FIRING;
            
        }else{
        
            move_towards_point(waypoints[wpi,0],waypoints[wpi,1], movespeed);
        
        }  
    }
}else if(state=STATE_GB_FIRING){
 
    speed = 0;
    if(my_gun!=noone){
       
        muzzleFlash.image_alpha = 1;
        var dd = angle_difference(tgtAngleTgl, my_gun.image_angle);
        //my_gun.image_angle += sin(degtorad(dd)) * turn_speed;
        my_gun.image_angle += median(-.5, dd,.5);
        if( abs(dd) &lt; 1){
            if(tgtAngleTgl==tgtAngle1){
                tgtAngleTgl=tgtAngle2;
            }else{
                tgtAngleTgl=tgtAngle1;
            }
        }
        muzzleFlash.image_angle = my_gun.image_angle;
        muzzleFlash.x = my_gun.x + lengthdir_x(my_gun_length, my_gun.image_angle);
        muzzleFlash.y = my_gun.y + lengthdir_y(my_gun_length, my_gun.image_angle);
    } 
}else{
    muzzleFlash.image_alpha = 1;
}

y += vspd;
depth = -y;
   
if(instance_exists(my_gun)){
    my_gun.x = x;
    my_gun.y = y;
    my_gun.depth = depth-10;
} 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

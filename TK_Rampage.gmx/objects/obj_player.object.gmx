<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
move = 0;
hsp = 0;
vsp = 0;
movespeed = 4;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get player's input
key_right = scr_user_input(INPUT_MV_RIGHT);
key_left = scr_user_input(INPUT_MV_LEFT);
key_up = scr_user_input(INPUT_MV_UP);
key_down = scr_user_input(INPUT_MV_DOWN);

//React to inputs
move_h = key_right - key_left;
move_v = key_down - key_up;
hsp = move_h * movespeed;
vsp = move_v * movespeed;

depth = -y;


//Horizontal Collision Check
/***
if (place_meeting(x+hsp,y,obj_solid))
{
    while(!place_meeting(x+sign(hsp),y,obj_solid))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
***/
// Right boundry
if (x + (sprite_width/2) + hsp &gt;= global.bound_pr)
{
    while(x + (sprite_width/2) &lt; global.bound_pr)
    {
        x += sign(hsp);
    }
    hsp = 0;
}

// Left boundry
if (x - (sprite_width/2) + hsp &lt;= global.bound_pl)
{
    while(x - (sprite_width/2) &gt; global.bound_pl)
    {
        x += sign(hsp);
    }
    hsp = 0;
}

x += hsp;

//Vertical Collision Check
/***
if (place_meeting(x,y+vsp,obj_solid))
{
    while(!place_meeting(x,y+sign(vsp),obj_solid))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
***/

// Top boundry
if (y - (sprite_height/2) + vsp &lt;= global.bound_t)
{
    while(y - (sprite_width/2) &gt; global.bound_t)
    {
        y += sign(vsp);
    }
    vsp = 0;
}

// Bottom boundry
if (y + (sprite_height/2) + vsp &gt;= global.bound_b)
{
    while(y + (sprite_width/2) &lt; global.bound_b)
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
enum depthsCinFinal{

    hero = -900,
    cat = -1000,
    heart = -800    
}


enum statesCin2{
    ready,
}

// Load presets 

ini_open("tk_rampage.ini");
heroXOffset = ini_read_real( 'CIN_FINAL', 'heroXOffset', 16 );
heroYOffset = ini_read_real( 'CIN_FINAL', 'heroYOffset', 0 );
catXOffset = ini_read_real( 'CIN_FINAL', 'catXOffset', 0 );
catYOffset = ini_read_real( 'CIN_FINAL', 'catYOffset', 0 );
heartYOffset = ini_read_real( 'CIN_FINAL', 'heartYOffset', 0 );
ini_close();


depth=-10000000;
window_set_cursor(cr_default);
state = statesCin2.ready;

hro = instance_create(room_width/2+heroXOffset, room_height/2+heroYOffset,obj_cin_hero_final);
cat = instance_create(room_width/2+catXOffset, room_height/2+catYOffset,obj_cin_hero_cat);

hro.depth = depthsCinFinal.hero;
cat.depth = depthsCinFinal.cat;

alarm[0]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make heart
var offset = irandom_range(0,16) - 8;
var scale = random_range(.25,1); 
var hrt = instance_create(room_width/2+offset,room_height/2+heartYOffset,obj_cin_heart);
hrt.direction = 90;
hrt.depth = depthsCinFinal.heart;
hrt.speed = 1;
hrt.image_xscale = scale;
hrt.image_yscale = scale;
alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Events
with(obj_cin_heart){
    if(y&lt;-32){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard Controlls
/// Keyboard input
if(scr_user_input(INPUT_MENU_BACK)){
    room_goto(rm_menu);
}

if(debug_mode){
    if(keyboard_check_pressed(vk_enter)){
        room_goto(room);
    }
    if(keyboard_check_pressed(vk_space)){
        pause = !pause;
    }
    
    showCoords=false;
    selectedObj = noone;
    if( mouse_check_button(mb_left) ){
        
        var D=100000000;
        var inst;
        for (var i = 0; i &lt; instance_number(obj_cin); i += 1)
        {
            inst = instance_find(obj_cin,i);
            if(position_meeting(mouse_x, mouse_y, inst)){
                if(inst.depth &lt; D){
                    D = inst.depth;
                    selectedObj = inst;
                }
            }
    
        }
        
        if(selectedObj!=noone){
            showCoords=true;
            if(keyboard_check_pressed(vk_left)){
                selectedObj.x--; 
            }else if(keyboard_check_pressed(vk_right)){
                selectedObj.x++;
            }
            
            if(keyboard_check_pressed(vk_up)){
                selectedObj.y--; 
            }else if(keyboard_check_pressed(vk_down)){
                selectedObj.y++;
            }
        }
        
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
